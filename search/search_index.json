{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentaci\u00f3n de Python con explicaciones y ejemplos Bienvenido al curso de pyhton. En esta documentaci\u00f3n encontraras: Las variables y sus tipos Usos de los strings Tipos de operadores IF's y Bucles","title":"Inicio"},{"location":"#documentacion-de-python-con-explicaciones-y-ejemplos","text":"Bienvenido al curso de pyhton. En esta documentaci\u00f3n encontraras: Las variables y sus tipos Usos de los strings Tipos de operadores IF's y Bucles","title":"Documentaci\u00f3n de Python con explicaciones y ejemplos"},{"location":"variables/variables/","text":"En python las variables no tienen tipo, ya que a la hora de definir una variable el mismo ya sabe que valor va a tomar esa variable Tipos de variables Las variables toman los valores de forma autom\u00e1tica que quiere decir esto que Python es un leguaje tipado din\u00e1mico. Esto significa que el tipo de una variable se determina en tiempo de ejecuci\u00f3n, no en tiempo de compilaci\u00f3n. Por tanto, no es necesario declarar el tipo de una variable cuando se crea. Definici\u00f3n de una variable con un valor de tipo entero. entero = 1 Definici\u00f3n de una variable con un valor de tipo doble, es decir, decimal. double = 3.5 Definici\u00f3n de una variable de tipo string, es decir, una varible que solo almacena texto. string = \"Hola\" Definici\u00f3n de una variable booleana, es decir, una variable que solo almacena True o False y como valor por defecto se le asigna False. boolean = False Definici\u00f3n de una variable de tipo array, es decir, una colecci\u00f3n ordenada de elementos. Los elementos pueden ser de cualquier tipo (n\u00fameros, cadenas, otros arrays, etc.), y se acceden mediante un \u00edndice num\u00e9rico que empieza en 0. array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] Definici\u00f3n de una variable de tipo diccionario, es decir, una colecci\u00f3n no ordenada de pares clave-valor. En lugar de usar \u00edndices num\u00e9ricos como en las listas, usamos claves para acceder a los valores. diccionario = { 'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid' } Mostrar valores por consola con print() print() es una funci\u00f3n incorporada en Python que se usa para mostrar informaci\u00f3n en la salida est\u00e1ndar (normalmente la consola). Puede imprimir uno o m\u00e1s valores, separadolos con un espacio por defecto. Voy a poner ejemplos de como se usa el print() con las variables anteriores. print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid'} Mostrar por pantalla el tipo que tiene la variable Tambi\u00e9n podemos usar print() para mostrar por pantalla que tipo tiene cada variable dependiendo del valor asignado usando type() . print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'> Tambi\u00e9n podemos declarar multiples variables en una l\u00ednea, no es recomendable pero se puede hacer. nombre, edad, es_mayor, pie = \"Luis\", 25, True, 42.5 Acceder a un diccionario Para acceder a un diccionario se acceder de forma parecida a una array, pero en este caso en vez de poner la posici\u00f3n le ponemos el valor al que queremos acceder. Paso 1. Definimos el diccionario Informacion = { 'Nombre': 'Pedro', 'Apellido': 'Gonzalez', 'Pais': 'Espa\u00f1a', 'Ciudad': 'Getafe', 'Edad': 24 } Paso 2. Accedemos a Nombre y Edad : print(Informacion['Nombre'], Informacion['Edad']) # Resultado -> Pedro 24","title":"Variables"},{"location":"variables/variables/#en-python-las-variables-no-tienen-tipo-ya-que-a-la-hora-de-definir-una-variable-el-mismo-ya-sabe-que-valor-va-a-tomar-esa-variable","text":"","title":"En python las variables no tienen tipo, ya que a la hora de definir una variable el mismo ya sabe que valor va a tomar esa variable"},{"location":"variables/variables/#tipos-de-variables","text":"Las variables toman los valores de forma autom\u00e1tica que quiere decir esto que Python es un leguaje tipado din\u00e1mico. Esto significa que el tipo de una variable se determina en tiempo de ejecuci\u00f3n, no en tiempo de compilaci\u00f3n. Por tanto, no es necesario declarar el tipo de una variable cuando se crea. Definici\u00f3n de una variable con un valor de tipo entero. entero = 1 Definici\u00f3n de una variable con un valor de tipo doble, es decir, decimal. double = 3.5 Definici\u00f3n de una variable de tipo string, es decir, una varible que solo almacena texto. string = \"Hola\" Definici\u00f3n de una variable booleana, es decir, una variable que solo almacena True o False y como valor por defecto se le asigna False. boolean = False Definici\u00f3n de una variable de tipo array, es decir, una colecci\u00f3n ordenada de elementos. Los elementos pueden ser de cualquier tipo (n\u00fameros, cadenas, otros arrays, etc.), y se acceden mediante un \u00edndice num\u00e9rico que empieza en 0. array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] Definici\u00f3n de una variable de tipo diccionario, es decir, una colecci\u00f3n no ordenada de pares clave-valor. En lugar de usar \u00edndices num\u00e9ricos como en las listas, usamos claves para acceder a los valores. diccionario = { 'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid' }","title":"Tipos de variables"},{"location":"variables/variables/#mostrar-valores-por-consola-con-print","text":"print() es una funci\u00f3n incorporada en Python que se usa para mostrar informaci\u00f3n en la salida est\u00e1ndar (normalmente la consola). Puede imprimir uno o m\u00e1s valores, separadolos con un espacio por defecto. Voy a poner ejemplos de como se usa el print() con las variables anteriores. print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid'}","title":"Mostrar valores por consola con print()"},{"location":"variables/variables/#mostrar-por-pantalla-el-tipo-que-tiene-la-variable","text":"Tambi\u00e9n podemos usar print() para mostrar por pantalla que tipo tiene cada variable dependiendo del valor asignado usando type() . print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'> Tambi\u00e9n podemos declarar multiples variables en una l\u00ednea, no es recomendable pero se puede hacer. nombre, edad, es_mayor, pie = \"Luis\", 25, True, 42.5","title":"Mostrar por pantalla el tipo que tiene la variable"},{"location":"variables/variables/#acceder-a-un-diccionario","text":"Para acceder a un diccionario se acceder de forma parecida a una array, pero en este caso en vez de poner la posici\u00f3n le ponemos el valor al que queremos acceder. Paso 1. Definimos el diccionario Informacion = { 'Nombre': 'Pedro', 'Apellido': 'Gonzalez', 'Pais': 'Espa\u00f1a', 'Ciudad': 'Getafe', 'Edad': 24 } Paso 2. Accedemos a Nombre y Edad : print(Informacion['Nombre'], Informacion['Edad']) # Resultado -> Pedro 24","title":"Acceder a un diccionario"}]}