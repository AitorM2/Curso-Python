{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentaci\u00f3n de Python con explicaciones y ejemplos Bienvenido al curso de pyhton. En esta documentaci\u00f3n encontraras: Las variables y sus tipos Usos de los strings Tipos de operadores IF's y Bucles Funciones Se recuerda que todos los ejemplos que se muestran se pueden probar, es decir, se pueden copiar y pegar en un IDE y probarlos para ver su funcionamiento e investigar","title":"Inicio"},{"location":"#documentacion-de-python-con-explicaciones-y-ejemplos","text":"Bienvenido al curso de pyhton. En esta documentaci\u00f3n encontraras: Las variables y sus tipos Usos de los strings Tipos de operadores IF's y Bucles Funciones Se recuerda que todos los ejemplos que se muestran se pueden probar, es decir, se pueden copiar y pegar en un IDE y probarlos para ver su funcionamiento e investigar","title":"Documentaci\u00f3n de Python con explicaciones y ejemplos"},{"location":"funciones/funciones/","text":"Aqu\u00ed se va a mostrar como definir una funci\u00f3n y que es una funci\u00f3n Una funci\u00f3n es un bloque de c\u00f3digo que s\u00f3lo se ejecuta cuando se llama, puede pasar datos conocidos como par\u00e1metros, a una funci\u00f3n y adem\u00e1s una funci\u00f3n puede devolver datos como resultado. Creaci\u00f3n de una funci\u00f3n En Python una funci\u00f3n se define usando la palabra clave def: Ejemplo de una funci\u00f3n b\u00e1sica def my_function(): print(\"Hola desde una funci\u00f3n\") Ejemplo de como llamar a una funci\u00f3n def my_function(): print(\"Hola desde una funci\u00f3n\") my_function() Al ejecutar este ejemplo nos dar\u00e1 este resultado: Hola desde una funci\u00f3n Ya que al usar my_function() estariamos llamando a la funci\u00f3n para que se ejecute. Pasar argumentos a una funci\u00f3n La informaci\u00f3n se puede pasar a las funciones como argumentos. Los argumentos se especifican despu\u00e9s del nombre de la funci\u00f3n, dentro del par\u00e9ntesis. Puedes agregar tantos argumentos como quieras, simplemente sep\u00e1ralos con una coma. En el siguiente ejemplo tienes una funci\u00f3n con un argumento (fname). Cuando se llama a la funci\u00f3n, pasamos un nombre, que se usa dentro de la funci\u00f3n para imprimir el nombre completo: def my_function(fname): print(fname + \" Martinez\") my_function(\"Luis\") my_function(\"Paco\") my_function(\"Laura\") Resultado de ejecutar la funci\u00f3n anterior: Luis Martinez Paco Martinez Laura Martinez N\u00fameros de argumentos De forma predeterminada, se debe llamar a una funci\u00f3n con la cantidad correcta de argumentos. Lo que significa que si tu funci\u00f3n espera 2 argumentos, debes llamar a la funci\u00f3n con 2 argumentos, ni uno m\u00e1s ni uno menos. Ejemplo de una funci\u00f3n que espera 2 argumentos y le pasamos dos argumentos. def my_function(fname, lname): print(fname + \" \" + lname) my_function(\"Sergio\", \"Gonzalez\") Resultado de ejecutar la funci\u00f3n anterior: Sergio Gonzalez Si intentamos llamar a la funci\u00f3n con 1 o 3 argumentos, obtendr\u00e1s un error. Ejemplo de una funci\u00f3n que espera dos argumentos y le pasamos 1. def my_function(fname, lname): print(fname + \" \" + lname) my_function(\"Sergio\") Resultado de ejecutar la funci\u00f3n anterior: my_function(\"Sergio\") ~~~~~~~~~~~^^^^^^^^^^ TypeError: my_function() missing 1 required positional argument: 'lname'","title":"Funciones"},{"location":"funciones/funciones/#aqui-se-va-a-mostrar-como-definir-una-funcion-y-que-es-una-funcion","text":"Una funci\u00f3n es un bloque de c\u00f3digo que s\u00f3lo se ejecuta cuando se llama, puede pasar datos conocidos como par\u00e1metros, a una funci\u00f3n y adem\u00e1s una funci\u00f3n puede devolver datos como resultado.","title":"Aqu\u00ed se va a mostrar como definir una funci\u00f3n y que es una funci\u00f3n"},{"location":"funciones/funciones/#creacion-de-una-funcion","text":"En Python una funci\u00f3n se define usando la palabra clave def: Ejemplo de una funci\u00f3n b\u00e1sica def my_function(): print(\"Hola desde una funci\u00f3n\") Ejemplo de como llamar a una funci\u00f3n def my_function(): print(\"Hola desde una funci\u00f3n\") my_function() Al ejecutar este ejemplo nos dar\u00e1 este resultado: Hola desde una funci\u00f3n Ya que al usar my_function() estariamos llamando a la funci\u00f3n para que se ejecute.","title":"Creaci\u00f3n de una funci\u00f3n"},{"location":"funciones/funciones/#pasar-argumentos-a-una-funcion","text":"La informaci\u00f3n se puede pasar a las funciones como argumentos. Los argumentos se especifican despu\u00e9s del nombre de la funci\u00f3n, dentro del par\u00e9ntesis. Puedes agregar tantos argumentos como quieras, simplemente sep\u00e1ralos con una coma. En el siguiente ejemplo tienes una funci\u00f3n con un argumento (fname). Cuando se llama a la funci\u00f3n, pasamos un nombre, que se usa dentro de la funci\u00f3n para imprimir el nombre completo: def my_function(fname): print(fname + \" Martinez\") my_function(\"Luis\") my_function(\"Paco\") my_function(\"Laura\") Resultado de ejecutar la funci\u00f3n anterior: Luis Martinez Paco Martinez Laura Martinez","title":"Pasar argumentos a una funci\u00f3n"},{"location":"funciones/funciones/#numeros-de-argumentos","text":"De forma predeterminada, se debe llamar a una funci\u00f3n con la cantidad correcta de argumentos. Lo que significa que si tu funci\u00f3n espera 2 argumentos, debes llamar a la funci\u00f3n con 2 argumentos, ni uno m\u00e1s ni uno menos. Ejemplo de una funci\u00f3n que espera 2 argumentos y le pasamos dos argumentos. def my_function(fname, lname): print(fname + \" \" + lname) my_function(\"Sergio\", \"Gonzalez\") Resultado de ejecutar la funci\u00f3n anterior: Sergio Gonzalez Si intentamos llamar a la funci\u00f3n con 1 o 3 argumentos, obtendr\u00e1s un error. Ejemplo de una funci\u00f3n que espera dos argumentos y le pasamos 1. def my_function(fname, lname): print(fname + \" \" + lname) my_function(\"Sergio\") Resultado de ejecutar la funci\u00f3n anterior: my_function(\"Sergio\") ~~~~~~~~~~~^^^^^^^^^^ TypeError: my_function() missing 1 required positional argument: 'lname'","title":"N\u00fameros de argumentos"},{"location":"guia_de_instalacion/guia_instalacion/","text":"Guia de instalaci\u00f3n de Python en visual studio code Paso 1. Usaremos cualquier IDE de programaci\u00f3n si no tienes uno puedes usar visual studio code. Descargar visual studio code Paso 2. Procederemos a instalar el siguiente conjunto de extensiones para poder usar python. Extension pack de Python Paso 3. Tras haber instalado todo lo necesario procederemos a crear una carpeta donde crearemos nuestros archivos con extensi\u00f3n .py","title":"Gu\u00eda de instalaci\u00f3n de Python usando visual studio code"},{"location":"guia_de_instalacion/guia_instalacion/#guia-de-instalacion-de-python-en-visual-studio-code","text":"Paso 1. Usaremos cualquier IDE de programaci\u00f3n si no tienes uno puedes usar visual studio code. Descargar visual studio code Paso 2. Procederemos a instalar el siguiente conjunto de extensiones para poder usar python. Extension pack de Python Paso 3. Tras haber instalado todo lo necesario procederemos a crear una carpeta donde crearemos nuestros archivos con extensi\u00f3n .py","title":"Guia de instalaci\u00f3n de Python en visual studio code"},{"location":"ifs_y_bucles/ifs_y_bucles/","text":"Aqu\u00ed se van a mostrar como realizar un IF y los dos tipos de bucles que hay Para realizar una comparaci\u00f3n usando if's se define de forma distinta a java Uso y definici\u00f3n de un if Este es un ejemplo de un ejercicio b\u00e1sico paso a paso del uso de un if para comprobar si un numero es mayor a otro o viceversa. # Definimos las variables que vamos a comparar a = 5 b = 10 # Realizamos la comparaci\u00f3n y mostramos por pantalla el resultado if a > b: print(a, \" es mayor que \", b) # En este caso si a es mayor a b, nos motrar\u00e1 el mesaje 1 else: print(a, \" es menor que \", b) # En este caso si a es menor que b, nos motrar\u00e1 el mensaje 2 Mensaje 1 20 es mayor que 10 Mensaje 2 5 es menor que 10 Este es un ejemplo de un ejercicio mas complejo paso a paso del uso de un if para comprobar introduciendo la edad por pantalla si eres mayor de edad o no. # Definimos la variable que va a recibir el valor introducido por teclado, pero # no podemos comparar string con numeros entonces le decimos que lo que le vamos # a introducir por teclado es un entero usando el metodo que tiene python que es int() edad = int(input(\"Introduce la edad: \")) if edad >= 18: print(\"Eres mayor de edad\") else: print(\"Eres menor de edad\") Tipos de bucles Bucle for Para realizar el bucle for usaremos la siguiente estructura. Ejemplo para mostrar todas las frutas que tiene una array usando un bucle for. frutas = ['peras', 'platanos', 'manzanas', 'naranjas'] for x in frutas: print(x) Resultado del ejemplo: peras platanos manzanas naranjas Ejemplo para mostrar como el bucle for separa una por una las letras que tiene una palabra. palabra = \"Aparcamiento\" for x in palabra: print(x) Resultado del ejemplo: A p a r c a m i e n t o Bucle while Para realizar un bucle while realizaremos la siguiente estructura Ejemplo para ver como aumenta el contador. # Definimos el contador i = 1 # Realizamos el bucle while mostrando como aumenta el contador while i < 6: print(i) i += 1 Resultado del ejemplo: 1 2 3 4 5 Ejemplo para ver como aumenta el contador pero haciendo que se pare en un n\u00famero en concreto. # Definimos el contador k = 1 # Realizamos el bucle while mostrando como aumenta el contador, # pero diciendole que cuando sea 7 que detenga el programa while k < 9: print(k) if k == 7: break k += 1 Resultado del ejemplo: 1 2 3 4 5 6 7","title":"IF's y Bucles"},{"location":"ifs_y_bucles/ifs_y_bucles/#aqui-se-van-a-mostrar-como-realizar-un-if-y-los-dos-tipos-de-bucles-que-hay","text":"Para realizar una comparaci\u00f3n usando if's se define de forma distinta a java","title":"Aqu\u00ed se van a mostrar como realizar un IF y los dos tipos de bucles que hay"},{"location":"ifs_y_bucles/ifs_y_bucles/#uso-y-definicion-de-un-if","text":"Este es un ejemplo de un ejercicio b\u00e1sico paso a paso del uso de un if para comprobar si un numero es mayor a otro o viceversa. # Definimos las variables que vamos a comparar a = 5 b = 10 # Realizamos la comparaci\u00f3n y mostramos por pantalla el resultado if a > b: print(a, \" es mayor que \", b) # En este caso si a es mayor a b, nos motrar\u00e1 el mesaje 1 else: print(a, \" es menor que \", b) # En este caso si a es menor que b, nos motrar\u00e1 el mensaje 2 Mensaje 1 20 es mayor que 10 Mensaje 2 5 es menor que 10 Este es un ejemplo de un ejercicio mas complejo paso a paso del uso de un if para comprobar introduciendo la edad por pantalla si eres mayor de edad o no. # Definimos la variable que va a recibir el valor introducido por teclado, pero # no podemos comparar string con numeros entonces le decimos que lo que le vamos # a introducir por teclado es un entero usando el metodo que tiene python que es int() edad = int(input(\"Introduce la edad: \")) if edad >= 18: print(\"Eres mayor de edad\") else: print(\"Eres menor de edad\")","title":"Uso y definici\u00f3n de un if"},{"location":"ifs_y_bucles/ifs_y_bucles/#tipos-de-bucles","text":"","title":"Tipos de bucles"},{"location":"ifs_y_bucles/ifs_y_bucles/#bucle-for","text":"Para realizar el bucle for usaremos la siguiente estructura. Ejemplo para mostrar todas las frutas que tiene una array usando un bucle for. frutas = ['peras', 'platanos', 'manzanas', 'naranjas'] for x in frutas: print(x) Resultado del ejemplo: peras platanos manzanas naranjas Ejemplo para mostrar como el bucle for separa una por una las letras que tiene una palabra. palabra = \"Aparcamiento\" for x in palabra: print(x) Resultado del ejemplo: A p a r c a m i e n t o","title":"Bucle for"},{"location":"ifs_y_bucles/ifs_y_bucles/#bucle-while","text":"Para realizar un bucle while realizaremos la siguiente estructura Ejemplo para ver como aumenta el contador. # Definimos el contador i = 1 # Realizamos el bucle while mostrando como aumenta el contador while i < 6: print(i) i += 1 Resultado del ejemplo: 1 2 3 4 5 Ejemplo para ver como aumenta el contador pero haciendo que se pare en un n\u00famero en concreto. # Definimos el contador k = 1 # Realizamos el bucle while mostrando como aumenta el contador, # pero diciendole que cuando sea 7 que detenga el programa while k < 9: print(k) if k == 7: break k += 1 Resultado del ejemplo: 1 2 3 4 5 6 7","title":"Bucle while"},{"location":"operadores/operadores/","text":"Aqu\u00ed se van a mostrar los diferentes tipos de operadores que hay en python y su uso Los operadores que hay son iguales que en otros lenguajes de programaci\u00f3n con la unica peculiaridad y es que en este caso para definir un numero con exponente no necesitamos usar nada como en java. Operadores de c\u00e1lculo Ejemplo de operador de suma suma = 4 + 1 Ejemplo de operador de resta resta = 3 - 1 Ejemplo de operador de multiplicaci\u00f3n multiplicacion = 6 * 2 Ejemplo de operador de divisi\u00f3n division = 20 / 3 Ejemplo de operador de divisi\u00f3n sin resto divisionsinresto = 20 // 3 Ejemplo de operador de m\u00f3dulo, este tipo nos entrega el resto de una divisi\u00f3n modulo = 3 % 2 Ejemplo de operador de exponente, es decir, un n\u00famero elevado a x exponente = 3 ** 2 Comprobaci\u00f3n del resultado de cada variable de c\u00e1lculo print(suma) # Resultado -> 5 print(resta) # Resultado -> 2 print(multiplicacion) # Resultado -> 12 print(division) # Resultado -> 6.666666666666667 print(divisionsinresto) # Resultado -> 6 print(modulo) # Resultado -> 1 print(exponente) # Resultado -> 9 Operadores de comparaci\u00f3n Ejemplo de operador de mayor que mayor = 5 > 3 Ejemplo de operador de menor que menor = 10 < 9 Ejemplo de operador de mayor o igual que mayoroigual = 1 >= 3 Ejemplo de operador de menor o igual que menoroigual = 12 <= 44 Ejemplo de operador de igual a que igual = 8 == 8 Ejemplo de operador de diferente de que diferente = 15 != 15 Comprobaci\u00f3n del resultado de cada variable de comparaci\u00f3n print(mayor) # Resultado -> True print(menor) # Resultado -> False print(mayoroigual) # Resultado -> False print(menoroigual) # Resultado -> True print(igual) # Resultado -> True print(diferente) # Resultado -> False En este caso nos va a mostrar False ya que en la variable le hemos preguntado si 15 es diferente de 15, por eso nos dice False. Si le pasaramos dos n\u00fameros diferentes nos diria True. diferente = 15 != 15 print(diferente) # Resultado -> False Definicion de las variables de comparaci\u00f3n usando palabras reservadas Ejemplo de operador de igual a algo usando palabra reservada igual2 = 2 is 2 Ejemplo de operador de no es algo usando palabra reservada noes = 3 is not 2 Ejemplo de operador de comprobar si una palabra contiene una letra contiene = 'A' in 'Avi\u00f3n' Ejemplo de si contiene varias letras contiene2 = 'es' in 'Mi coche es rojo' Comprobaci\u00f3n del resultado de cada variable de comparaci\u00f3n con palabras reservadas print(igual2) # Resultado -> True print(noes) # Resultado -> True print(contiene) # Resultado -> True print(contiene2) # Resultado -> True","title":"Tipos de operadores"},{"location":"operadores/operadores/#aqui-se-van-a-mostrar-los-diferentes-tipos-de-operadores-que-hay-en-python-y-su-uso","text":"Los operadores que hay son iguales que en otros lenguajes de programaci\u00f3n con la unica peculiaridad y es que en este caso para definir un numero con exponente no necesitamos usar nada como en java.","title":"Aqu\u00ed se van a mostrar los diferentes tipos de operadores que hay en python y su uso"},{"location":"operadores/operadores/#operadores-de-calculo","text":"Ejemplo de operador de suma suma = 4 + 1 Ejemplo de operador de resta resta = 3 - 1 Ejemplo de operador de multiplicaci\u00f3n multiplicacion = 6 * 2 Ejemplo de operador de divisi\u00f3n division = 20 / 3 Ejemplo de operador de divisi\u00f3n sin resto divisionsinresto = 20 // 3 Ejemplo de operador de m\u00f3dulo, este tipo nos entrega el resto de una divisi\u00f3n modulo = 3 % 2 Ejemplo de operador de exponente, es decir, un n\u00famero elevado a x exponente = 3 ** 2","title":"Operadores de c\u00e1lculo"},{"location":"operadores/operadores/#comprobacion-del-resultado-de-cada-variable-de-calculo","text":"print(suma) # Resultado -> 5 print(resta) # Resultado -> 2 print(multiplicacion) # Resultado -> 12 print(division) # Resultado -> 6.666666666666667 print(divisionsinresto) # Resultado -> 6 print(modulo) # Resultado -> 1 print(exponente) # Resultado -> 9","title":"Comprobaci\u00f3n del resultado de cada variable de c\u00e1lculo"},{"location":"operadores/operadores/#operadores-de-comparacion","text":"Ejemplo de operador de mayor que mayor = 5 > 3 Ejemplo de operador de menor que menor = 10 < 9 Ejemplo de operador de mayor o igual que mayoroigual = 1 >= 3 Ejemplo de operador de menor o igual que menoroigual = 12 <= 44 Ejemplo de operador de igual a que igual = 8 == 8 Ejemplo de operador de diferente de que diferente = 15 != 15","title":"Operadores de comparaci\u00f3n"},{"location":"operadores/operadores/#comprobacion-del-resultado-de-cada-variable-de-comparacion","text":"print(mayor) # Resultado -> True print(menor) # Resultado -> False print(mayoroigual) # Resultado -> False print(menoroigual) # Resultado -> True print(igual) # Resultado -> True print(diferente) # Resultado -> False En este caso nos va a mostrar False ya que en la variable le hemos preguntado si 15 es diferente de 15, por eso nos dice False. Si le pasaramos dos n\u00fameros diferentes nos diria True. diferente = 15 != 15 print(diferente) # Resultado -> False","title":"Comprobaci\u00f3n del resultado de cada variable de comparaci\u00f3n"},{"location":"operadores/operadores/#definicion-de-las-variables-de-comparacion-usando-palabras-reservadas","text":"Ejemplo de operador de igual a algo usando palabra reservada igual2 = 2 is 2 Ejemplo de operador de no es algo usando palabra reservada noes = 3 is not 2 Ejemplo de operador de comprobar si una palabra contiene una letra contiene = 'A' in 'Avi\u00f3n' Ejemplo de si contiene varias letras contiene2 = 'es' in 'Mi coche es rojo'","title":"Definicion de las variables de comparaci\u00f3n usando palabras reservadas"},{"location":"operadores/operadores/#comprobacion-del-resultado-de-cada-variable-de-comparacion-con-palabras-reservadas","text":"print(igual2) # Resultado -> True print(noes) # Resultado -> True print(contiene) # Resultado -> True print(contiene2) # Resultado -> True","title":"Comprobaci\u00f3n del resultado de cada variable de comparaci\u00f3n con palabras reservadas"},{"location":"strings/strings/","text":"Aqu\u00ed se van a mostrar las diferentes cosas que se pueden hacer con las strings Acceder a caracteres de una palabra En este apartado vamos a ver ejemplos de como se acceder a una letra de una palabra. Ejemplo para acceder a la primera letra # Definimos la palabra palabra = \"Papel\" # Definimos la variable donde vamos a almacenar la primera letra # y como si fuera una array le decimos que vamos a acceder a la primera posici\u00f3n # en este caso le ponemos el n\u00famero cero (0) primera_letra = palabra[0] # Mostramos por pantalla la palabra print(palabra) # Resultado -> Papel # Mostramos por pantalla la letra a la que hemos accedido print(primera_letra) # Resultado -> P Ejemplo para acceder a la tercera letra # Definimos la palabra palabra = \"Piedra\" # Definimos la variable donde vamos a almacenar la tercera letra # y como si fuera una array le decimos que vamos a acceder a la tercera posici\u00f3n # en este caso le ponemos el n\u00famero dos (2) tercera_letra = palabra[2] # Mostramos por pantalla la palabra print(\"\\n\" + palabra) # Resultado -> Piedra # Mostramos por pantalla la letra a la que hemos accedido print(tercera_letra) # Resultado -> e Dividir palabras En este apartado vamos a ver ejemplos de como dividir una palabra dejando los caracteres deseados. Ejemplo para coger las tres primeras letras # Definimos la palabra palabra = 'Sustraer' # Vamos a obtener las tres primeras letras, para realizar esto lo tratamos como una array, # le decimos que empieze en la posici\u00f3n cero y termine en la tres pero al decirle que termine # en la tres no nos va a incluir la letra que esta en la posici\u00f3n seis primeras_tres = palabra[0:3] # Mostramos la palabra completa print(palabra) # Mostramos por pantalla las tres primeras letras de la palabra print(primeras_tres) # Resultado -> Sus Ejemplo para coger las tres ultimas letras # Definimos la palabra palabra = 'Atrapar' # Ahora vamos a obtener las tres \u00faltimas letras, para realizar esto lo tratamos como una array, # le decimos que empieze en la posici\u00f3n cuatro y termine en la siete pero al decirle que termine # en la siete no nos va a incluir la letra que esta en la posici\u00f3n siete ultimas_tres = palabra[4:7] # Mostramos la palabra completa print(palabra) # Mostramos por pantalla las ultimas tres letras de la palabra print(ultimas_tres) # Resultado -> par Omitir caracteres de una palabra En este apartado vamos a ver ejemplos de como omitir caracteres de una palabra. # Definimos la frase frase = \"Convivir\" # Definimos la variable donde vamos a almacenar la frase con caracteres omitidos # para realizar esto tenemos que tratarlo como una array le decimos que empieze en la letra # que se encuentra en la posici\u00f3n cero y que se detenga antes de llegar a la letra en la posici\u00f3n 7 # despu\u00e9s le decimos que coja una letra y se salte otra de forma alternada, es decir, en este caso coge # las letras que se encuentran en las posiciones 0, 2, 4 y 6 frase_final = frase[0:7:2] # Mostramos por pantalla la frase antes de realizar la omisi\u00f3n de letras print(frase) # Mostramos por pantalla el resultado print(frase_final) # Resultado -> Cnii Obtener longitud de una frase o de una palabra En este apartado vamos a ver ejemplos de como obtener la longitud de una frase o una palabra usando el m\u00e9todo len() . Ejemplo de explicaci\u00f3n para obtener la longitud de una sola letra # Definimos la letra letra = \"A\" # Mostramos por pantalla la letra print(letra) # Resultado -> A # Mostramos por pantalla la longitud de la letra, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(letra)) # Resultado -> 1 Ejemplo para obtener la longitud de una palabra # Definimos la palabra palabra = \"Picapica\" # Mostramos por pantalla la palabra print(palabra) # Resultado -> Picapica # Mostramos por pantalla la longitud de la palabra, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(palabra)) # Resultado -> 8 Ejemplo para obtener la longitud de una frase # Definimos la frase frase = \"He comprado manzanas para merendar\" # Mostramos por pantalla la frase print(frase) # Resultado -> He comprado manzanas para merendar # Mostramos por pantalla la longitud de la frase, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(frase)) # Resultado -> 34 Descomponer una palabra letra por letra En este apartado vamos a ver un ejemplo de como descomponer una palabra. # Definimos el nombre de la variable y le introducimos el texto deseado palabra = \"Hola\" # Para descomponer la palabra definimos diferentes variables para cada caracter que tenga nuestra frase # y despues le decimos que esas variables van a ser igual a la variable de la palabra a,b,c,d = palabra # Mostramos por pantalla la palabra sin descomponer print(\"Frase sin descomponer: \" + palabra) # Mostramos por pantalla variable por variable que hemos creado anteriormente, esto nos mostraria cada caracter print(\"\\nFrase descompuesta caracter por caracter: \") print(a) # Caracter -> H print(b) # Caracter -> O print(c) # Caracter -> L print(d) # Caracter -> A Concatenar palabras, letras o frases En este apartado vamos a ver ejemplos de como concatenar cadenas de texto. Ejemplo para concatenar sin espacios # Definimos la primera palabra o frase Nombre = \"Luis\" # Definimos la segunda palabra o frase Apellido = \"Martinez\" print(\"Concatenaci\u00f3n sin espacios: \") # Mostramos por pantalla la concatenaci\u00f3n, para concatenar palabras o frases # utilizamos el signo mas(+) para indicarle que queremos unir esas dos varibles print(Nombre + Apellido) # Resultado -> LuisMartinez Ejemplo para concatenar con espacios # Definimos la primera palabra o frase Nombre = \"Laura\" # Definimos la segunda palabra o frase Apellido = \"Gonzalez\" # Definimos el separador que queremos utilizar, es decir, le podemos dar # cualquier nombre a la variable pero es recomendable darle un nombre significativo # en este caso lo vamos a separar con espacios espacio = ' ' print(\"\\nConcatenaci\u00f3n con espacio: \") # Mostramos por pantalla la concatenaci\u00f3n incluyendo el separador, es decir, la variable espacio print(Nombre + espacio + Apellido) # Resultado -> Laura Gonzalez Ejemplo para concatenar con puntos, asteriscos, guiones, etc # Definimos la primera palabra o frase Nombre = \"Paco\" # Definimos la segunda palabra o frase Apellido = \"Rodriguez\" # Definimos el separador que queremos utilizar, es decir, le podemos dar # cualquier nombre a la variable pero es recomendable darle un nombre significativo # en este caso lo vamos a separar con puntos punto = '.' print(\"\\nConcatenaci\u00f3n con punto: \") # Mostramos por pantalla la concatenaci\u00f3n incluyendo el separador, es decir, la variable espacio print(Nombre + punto + Apellido) # Resultado -> Paco.Rodriguez Introducir por valores por teclado En este apartado vamos a ver ejemplos de como introducir valores por teclado con el m\u00e9todo input() , en este ejemplo pide que introduzcamos n\u00fameros pero podemos cambiar ese texto y pedir lo que necesitamos. Caso para n\u00fameros # Definimos la variable que va a almacenar el valor que vamos a introducir numero = input(\"Introduce un n\u00famero: \") # Mostramos por pantalla el valor introducido print(numero) Caso en el que queramos que introduzcan texto # Definimos la variable que va a almacenar el valor que vamos a introducir texto = input(\"Introduce una palabra: \") # Mostramos por pantalla el valor introducido print(texto) M\u00e9todos que se pueden usar con los strings En este apartado vamos a ver ejemplos de los diferentes m\u00e9todos que hay y que se pueden usan. M\u00e9todo capitalize() M\u00e9todo capitalize(): Este m\u00e9todo se usa para convertir la primera palabra de una frase a may\u00fasculas. # Definimos la frase frase1 = \"el sol brilla mucho\" print(\"M\u00e9todo capitalize(): \") # Mostramos por pantalla la frase original print(frase1) # Mostramos por pantalla la frase con la primera letra en may\u00fasculas usando el m\u00e9todo capitalize() print(frase1.capitalize()) # Resultado -> El sol brilla mucho M\u00e9todo count() M\u00e9todo count(): Este m\u00e9todo se usa para contar cuantas veces aparece una letra en la frase. # Definimos la frase frase2 = \"el coche aparcado es rojo\" print(\"\\nM\u00e9todo count(): \") # Mostramos por pantalla la frase original print(frase2) # Mostramos por pantalla el conteo de Oes que tiene la frase usando el m\u00e9todo count() print(frase2.count('o')) # Resultado -> 4 M\u00e9todo endswith() M\u00e9todo endswith(): Este m\u00e9todo se usa para comprobar si una frase termina con algo en espec\u00edfico, este m\u00e9todo es un boolean, es decir, si acaba de esa forma o no (true o false). # Definimos la frase frase3 = \"los arboles son altos\" print(\"\\nM\u00e9todo endswith(): \") # Mostramos por pantalla la frase original print(frase3) # Mostramos por pantalla si esa frase acaba de la forma que le decimos o no print(frase3.endswith(\"os\")) # Resultado -> True print(frase3.endswith(\"los\")) # Resultado -> False M\u00e9todo expandtabs() M\u00e9todo expandtabs(): Este m\u00e9todo se usa para reemplazar todos los caracteres de tabulaci\u00f3n (\\t) en una frase por un n\u00famero espec\u00edfico de espacios. # Definimos la frase frase4 = \"Me\\tvoy\\tde\\tvacaciones\" print(\"\\nM\u00e9todo expandtabs(): \") # Mostramos por pantalla la frase original print(frase4) # Mostramos por pantalla la frase con los espacios deseados print(frase4.expandtabs(0)) # Resultado -> Mevoydevacaciones print(frase4.expandtabs(20)) # Resultado -> Me voy de vacaciones M\u00e9todo find() M\u00e9todo find(): Este m\u00e9todo se usa para buscar una palabara espec\u00edfica en una frase y nos devuelve el n\u00famero en el que empieza y aparece esa palabra. Si esa palabra no se encuentra devuelve -1. # Definimos la frase frase5 = \"Bienvenidos al curso de programacion\" print(\"\\nM\u00e9todo find(): \") # Mostramos por pantalla la frase original print(frase5) # Mostramos por pantalla el n\u00famero de donde aparece por primera vez esa palabra # y si no existe muestra -1 print(frase5.find(\"curso\")) # Resultado -> 15 print(frase5.find(\"hola\")) # Resultado -> -1 M\u00e9todo format() M\u00e9todo format(): Este m\u00e9todo se usa para dar formato a Strings, permitiendo insertar valores dentro de un texto utilizando marcadores de posici\u00f3n {}. Esta es una forma poderosa y flexible de construir cadenas. # Definimos las variables que vamos a usar para dar formato nombre6 = \"Pedro\" apellido6 = \"Martinez\" # Definimos la frase que contiene las variables usadas para dar formato frase6_formato = \"Hola {} {}, bienvenido al sistema\".format(nombre6, apellido6) print(\"\\nM\u00e9todo format(): \") # Mostramos por pantalla la String con el formato print(frase6_formato) # Resultado -> Hola Pedro Martinez, bienvenido al sistema M\u00e9todo index() M\u00e9todo index(): Este m\u00e9todo es similar al m\u00e9todo find() se usa para buscar una subcadena dentro dentro de una cadena y nos devuelve el \u00edndice de la primera aparici\u00f3n. Sin embargo, a diferencia del m\u00e9todo find(), si la subcadena no se encuentra, index() lanza una expcepci\u00f3n llamada ValueError. # Definimos la frase frase7 = \"Aprender python es divertido\" print(\"\\nM\u00e9todo index(): \") # Mostramos por pantalla la frase original print(frase7) # Mostramos por pantalla el numero de veces que aparece una letra o conjunto de letras y # si no lo encuentra nos muestra el error ValueError print(frase7.index(\"e\")) # Resultado -> 3 M\u00e9todo isalnum() M\u00e9todo isalnum(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son alfanum\u00e9ricos, es decir, si son letras (a-z, A-Z) o son n\u00famero (0-9). # Definimos la frase sin espacios frase8 = \"TreintaDiasDePython\" # Definimos la frase con espacios frase81 = \"Ejemplos de Python\" print(\"\\nM\u00e9todo isalnum(): \") # Mostramos por pantalla las frases originales print(frase8) print(frase81) # Mostramos por pantalla si la cadena contiene valores alfanum\u00e9ricos mostrandonos true y # en caso de que contenga espacios nos motrar\u00e1 false ya que los espacios no son alfanum\u00e9ricos print(frase8.isalnum()) # Resultado -> true print(frase81.isalnum()) # Resultado -> false M\u00e9todo isalpha() M\u00e9todo isalpha(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son alfab\u00e9ticos, es decir, si son letras (a-z, A-Z). # Definimos la frase sin numeros frase9 = \"Vivoenunchalet\" # Definimos la frase con numeros frase91= \"Elnumeroesel29\" print(\"\\nM\u00e9todo isalpha(): \") # Mostramos por pantalla las frases originales print(frase9) print(frase91) # Mostramos por pantalla si la cadena contiene valores alfab\u00e9ticos mostrandonos true y # en caso de que contenga n\u00fameros nos motrar\u00e1 false ya que los n\u00famero no son alfab\u00e9ticos # otro caso que nos puede mostrar false es una frase con espacios, ya que los espacios # no son alfab\u00e9ticos print(frase9.isalpha()) # Resultado -> true print(frase91.isalpha()) # Resultado -> false M\u00e9todo isdecimal() M\u00e9todo isdecimal(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son n\u00famero decimales, esto significa que la cadena solo puede contener n\u00famero enteros sin decimales sin signos negativos, ni otros caracteres no n\u00famericos. # Definimos la frase con n\u00fameros decimales frase10 = \"1234\" # Definimos la frase sin numeros decimales frase101= \"-5678\" print(\"\\nM\u00e9todo isdecimal(): \") # Mostramos por pantalla las frases originales print(frase10) print(frase101) # Mostramos por pantalla si la cadena contiene valores decimales mostrandonos true y # en caso de que contenga d\u00edgitos no decimales nos motrar\u00e1 false ya que como se ha mencionado # anteriormente si contiene signo negativo u otros caracteres nos mostrar\u00e1 false print(frase10.isdecimal()) # Resultado -> true print(frase101.isdecimal()) # Resultado -> false M\u00e9todo isdigit() M\u00e9todo isdigit(): Este m\u00e9todo es un m\u00e9todo incorporado que se usa para verificar si todos los caracteres de una cadena est\u00e1 formada \u00fanicamente por n\u00fameros, sin embargo, isdigit() es m\u00e1s amplio que isdecimal(), ya que tambi\u00e9n acepta otros tipos de d\u00edgitos num\u00e9ricos que no sean solo n\u00famero del 0-9, como los n\u00fameros en otros sistemas num\u00e9ricos (como por ejemplo, n\u00fameros romanos o d\u00edgitos de otros alfabetos). # Definimos la frase con n\u00fameros decimales frase11 = \"1234\" # Definimos la frase sin numeros decimales frase111= \"567.8\" print(\"\\nM\u00e9todo isdigit(): \") # Mostramos por pantalla las frases originales print(frase11) print(frase111) # Mostramos por pantalla si la cadena contiene valores decimales mostrandonos true y # en caso de que contenga d\u00edgitos no decimales nos motrar\u00e1 false ya que como se ha mencionado # anteriormente si contiene signo negativo u otros caracteres nos mostrar\u00e1 false print(frase11.isdigit()) # Resultado -> true print(frase111.isdigit()) # Resultado -> false M\u00e9todo isidentifier() M\u00e9todo isidentifier(): Este m\u00e9todo se usa para comprobar si una cadena es un identificador v\u00e1lido en Pyhton. Un identificador es una secuencia de caracteres que puede ser utilizada como nombre para variables, funciones, clases, etc. Para que una cadena sea un identificador v\u00e1lido en Python, debe seguir estas reglas: Solo puede contener letras (May\u00fasculas o minusculas), digitos (0-9) y guiones bajos ( _ ). No puede comenzar con un n\u00famero. No puede ser una palabra reservada como (if, for, while, etc). print(\"\\nM\u00e9todo isidentifier(): \") # Mostramos por pantalla si los siguientes nombres de variables son identificadores v\u00e1lidos print(\"variable1\".isidentifier()) # Resultado -> true print(\"1variable\".isidentifier()) # Resultado -> false | Ya que comienza con un n\u00famero (Regla 2) print(\"mi_variable\".isidentifier()) # Resultado -> true M\u00e9todo islower() M\u00e9todo islower(): Este m\u00e9todo se usa para comprobar si todas las letras de una cadena de texto son min\u00fasculas. # Definimos la frase en minusculas frase13 = \"hola\" # Definimos la frase con una letra en mayusculas frase131 = \"Prueba\" print(\"\\nM\u00e9todo islower(): \") # Mostramos por pantalla las frases originales print(frase13) print(frase131) # Mostramos por pantalla si las siguientes cadenas estan en minusculas o no, si estan en minusculas nos # devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase13.islower()) # Resultado -> true print(frase131.islower()) # Resultado -> false M\u00e9todo isupper() M\u00e9todo isupper(): Este m\u00e9todo se usa para comprobar si todas las letras de una cadena de texto son may\u00fasculas. # Definimos la frase en minusculas frase14 = \"COCHE\" # Definimos la frase con una letra en mayusculas frase141 = \"moto\" print(\"\\nM\u00e9todo isupper(): \") # Mostramos por pantalla las frases originales print(frase14) print(frase141) # Mostramos por pantalla si las siguientes cadenas estan en mayusculas o no, si estan en mayusculas nos # devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase14.isupper()) # Resultado -> true print(frase141.isupper()) # Resultado -> false M\u00e9todo isnumeric() M\u00e9todo isnumeric(): Este m\u00e9todo se usa para comprobar si toda la cadena consiste en n\u00fameros, es decir, que la frase debe contener solo n\u00fameros y no puede contener letras, espacios o s\u00edmbolos. # Definimos la frase con numeros frase15 = \"123\" # Definimos la frase con numeros y letras frase151 = \"456abc\" print(\"\\nM\u00e9todo isnumeric(): \") # Mostramos por pantalla las frases originales print(frase15) print(frase151) # Mostramos por pantalla si las siguientes cadenas estan formadas solo por numeros o no, # si estan formada solo por n\u00fameros nos devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase15.isnumeric()) # Resultado -> true print(frase151.isnumeric()) # Resultado -> false M\u00e9todo join() M\u00e9todo join(): Este m\u00e9todo se usa para unir una secuencia ya sea una lista, tupla o cualquier otro itinerable de cadena de texto en una sola cadena. Este m\u00e9todo coge como argumento un itinerable que contiene cadenas y la concatena, usando el string que lo llama como separador. # Definimos la sentencia frase16 = [\"peras\", \"uvas\", \"sandias\"] # Definimos el resultado separado con espacios frase161 = \" \".join(frase16) # Definimos el resultado separado con guiones frase162 = \"-\".join(frase16) print(\"\\nM\u00e9todo join(): \") # Mostramos por pantalla la sentencia print(frase16) # Mostramos por pantalla los resultados concatenados print(frase161) # Resultado -> peras uvas sandias print(frase162) # Resultado -> peras-uvas-sandias M\u00e9todo strip() M\u00e9todo strip(): Este m\u00e9todo se usa para eliminar los espacios en blanco o caracteres especificados al principio o al final de una cadena de texto. No elimina los caracteres del medio de la cadena, solo elimina los del principio y los del final. # Definimos la frase con espacios en blanco frase17 = \" Hola, que tal? \" print(\"\\nM\u00e9todo strip(): \") # Mostramos por pantalla las frases originales print(frase17) # Mostramos por pantalla los resultados usando el m\u00e9todo strip() print(frase17.strip()) # Resultado -> Hola, que tal? M\u00e9todo replace() M\u00e9todo replace(): Este m\u00e9todo se usa para reemplazar una subcadena espec\u00edfica en una cadena por otra subcadena. Este m\u00e9todo no modifica la cadena original, sino que devuelve una nueva con las situaciones realizadas. # Definimos la frase frase18 = \"Estoy aprendiendo java\" print(\"\\nM\u00e9todo replace(): \") # Mostramos por pantalla la frase original print(frase18) # Mostramos por pantalla la frase reemplazando java por python print(frase18.replace('java', 'python')) # Resultado -> Estoy aprendiendo python M\u00e9todo split() M\u00e9todo split(): Este m\u00e9todo se usa para dividir una cadena en una lista de subcadenas, utilizando un delimitador espec\u00edfico como un espacio, una coma, etc. Si no se especifica un delimitador, divide la cadena en cada espacio en blanco. # Definimos la frase con division por espacios frase19 = \"Bienvenido a Python\" print(\"\\nM\u00e9todo split(): \") # Mostramos por pantalla la frase original print(frase19) # Mostramos por pantalla la frase dividida print(frase19.split()) # Resultado -> ['Bienvenido', 'a', 'Python'] M\u00e9todo title() M\u00e9todo title(): Este m\u00e9todo se usa para devolver una cadena donde la primera letra de cada palabra esta en mayuscula y el resto de las letras estan en minuscula. Este m\u00e9todo es util para formatear titulos o nombres de manera consistente. # Definimos la frase frase20 = \"mi casa es blanca\" print(\"\\nM\u00e9todo title(): \") # Mostramos por pantalla la frase original print(frase20) # Mostramos por pantalla la frase modificando las primeras letras print(frase20.title()) # Resultado -> Mi Casa Es Blanca M\u00e9todo swapcase() M\u00e9todo swapcase(): Este m\u00e9todo se usa para devolver una nueva cadena donde las letras en mayusculas se convierten en minuscula y las letras en minuscula se convierten en mayuscula. Este m\u00e9todo es util para invertir rapidamente el caso de los caracteres en una cadena. # Definimos la frase frase21 = \"Fruteria Paco\" print(\"\\nM\u00e9todo swapcase(): \") # Mostramos por pantalla la frase original print(frase21) # Mostramos por pantalla la frase modificando las mayusculas y las minusculas print(frase21.swapcase()) # Resultado -> Fruteria Paco M\u00e9todo startswith() M\u00e9todo startswith(): Este m\u00e9todo se usa para verificar si una cadena comienza con una subcadena espec\u00edfica devuelve un valor booleano true si la cadena comienza con la subcadena especificada o false si no comienza con la subcadena. # Definimos la frase frase22 = \"Que te calles\" frase221 = \"Esto es un chorizo\" print(\"\\nM\u00e9todo startswith(): \") # Mostramos por pantalla las frases originales print(frase22) print(frase221) # Mostramos por pantalla las frases mostrando si tienen ese comienzo o no print(frase22.startswith(\"Que\")) # Resultado -> true print(frase221.startswith(\"chorizo\")) # Resultado -> false","title":"Strings"},{"location":"strings/strings/#aqui-se-van-a-mostrar-las-diferentes-cosas-que-se-pueden-hacer-con-las-strings","text":"","title":"Aqu\u00ed se van a mostrar las diferentes cosas que se pueden hacer con las strings"},{"location":"strings/strings/#acceder-a-caracteres-de-una-palabra","text":"En este apartado vamos a ver ejemplos de como se acceder a una letra de una palabra. Ejemplo para acceder a la primera letra # Definimos la palabra palabra = \"Papel\" # Definimos la variable donde vamos a almacenar la primera letra # y como si fuera una array le decimos que vamos a acceder a la primera posici\u00f3n # en este caso le ponemos el n\u00famero cero (0) primera_letra = palabra[0] # Mostramos por pantalla la palabra print(palabra) # Resultado -> Papel # Mostramos por pantalla la letra a la que hemos accedido print(primera_letra) # Resultado -> P Ejemplo para acceder a la tercera letra # Definimos la palabra palabra = \"Piedra\" # Definimos la variable donde vamos a almacenar la tercera letra # y como si fuera una array le decimos que vamos a acceder a la tercera posici\u00f3n # en este caso le ponemos el n\u00famero dos (2) tercera_letra = palabra[2] # Mostramos por pantalla la palabra print(\"\\n\" + palabra) # Resultado -> Piedra # Mostramos por pantalla la letra a la que hemos accedido print(tercera_letra) # Resultado -> e","title":"Acceder a caracteres de una palabra"},{"location":"strings/strings/#dividir-palabras","text":"En este apartado vamos a ver ejemplos de como dividir una palabra dejando los caracteres deseados. Ejemplo para coger las tres primeras letras # Definimos la palabra palabra = 'Sustraer' # Vamos a obtener las tres primeras letras, para realizar esto lo tratamos como una array, # le decimos que empieze en la posici\u00f3n cero y termine en la tres pero al decirle que termine # en la tres no nos va a incluir la letra que esta en la posici\u00f3n seis primeras_tres = palabra[0:3] # Mostramos la palabra completa print(palabra) # Mostramos por pantalla las tres primeras letras de la palabra print(primeras_tres) # Resultado -> Sus Ejemplo para coger las tres ultimas letras # Definimos la palabra palabra = 'Atrapar' # Ahora vamos a obtener las tres \u00faltimas letras, para realizar esto lo tratamos como una array, # le decimos que empieze en la posici\u00f3n cuatro y termine en la siete pero al decirle que termine # en la siete no nos va a incluir la letra que esta en la posici\u00f3n siete ultimas_tres = palabra[4:7] # Mostramos la palabra completa print(palabra) # Mostramos por pantalla las ultimas tres letras de la palabra print(ultimas_tres) # Resultado -> par","title":"Dividir palabras"},{"location":"strings/strings/#omitir-caracteres-de-una-palabra","text":"En este apartado vamos a ver ejemplos de como omitir caracteres de una palabra. # Definimos la frase frase = \"Convivir\" # Definimos la variable donde vamos a almacenar la frase con caracteres omitidos # para realizar esto tenemos que tratarlo como una array le decimos que empieze en la letra # que se encuentra en la posici\u00f3n cero y que se detenga antes de llegar a la letra en la posici\u00f3n 7 # despu\u00e9s le decimos que coja una letra y se salte otra de forma alternada, es decir, en este caso coge # las letras que se encuentran en las posiciones 0, 2, 4 y 6 frase_final = frase[0:7:2] # Mostramos por pantalla la frase antes de realizar la omisi\u00f3n de letras print(frase) # Mostramos por pantalla el resultado print(frase_final) # Resultado -> Cnii","title":"Omitir caracteres de una palabra"},{"location":"strings/strings/#obtener-longitud-de-una-frase-o-de-una-palabra","text":"En este apartado vamos a ver ejemplos de como obtener la longitud de una frase o una palabra usando el m\u00e9todo len() . Ejemplo de explicaci\u00f3n para obtener la longitud de una sola letra # Definimos la letra letra = \"A\" # Mostramos por pantalla la letra print(letra) # Resultado -> A # Mostramos por pantalla la longitud de la letra, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(letra)) # Resultado -> 1 Ejemplo para obtener la longitud de una palabra # Definimos la palabra palabra = \"Picapica\" # Mostramos por pantalla la palabra print(palabra) # Resultado -> Picapica # Mostramos por pantalla la longitud de la palabra, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(palabra)) # Resultado -> 8 Ejemplo para obtener la longitud de una frase # Definimos la frase frase = \"He comprado manzanas para merendar\" # Mostramos por pantalla la frase print(frase) # Resultado -> He comprado manzanas para merendar # Mostramos por pantalla la longitud de la frase, para mostrar la longitud usamos # la funci\u00f3n predefinida que tiene python len() print(len(frase)) # Resultado -> 34","title":"Obtener longitud de una frase o de una palabra"},{"location":"strings/strings/#descomponer-una-palabra-letra-por-letra","text":"En este apartado vamos a ver un ejemplo de como descomponer una palabra. # Definimos el nombre de la variable y le introducimos el texto deseado palabra = \"Hola\" # Para descomponer la palabra definimos diferentes variables para cada caracter que tenga nuestra frase # y despues le decimos que esas variables van a ser igual a la variable de la palabra a,b,c,d = palabra # Mostramos por pantalla la palabra sin descomponer print(\"Frase sin descomponer: \" + palabra) # Mostramos por pantalla variable por variable que hemos creado anteriormente, esto nos mostraria cada caracter print(\"\\nFrase descompuesta caracter por caracter: \") print(a) # Caracter -> H print(b) # Caracter -> O print(c) # Caracter -> L print(d) # Caracter -> A","title":"Descomponer una palabra letra por letra"},{"location":"strings/strings/#concatenar-palabras-letras-o-frases","text":"En este apartado vamos a ver ejemplos de como concatenar cadenas de texto. Ejemplo para concatenar sin espacios # Definimos la primera palabra o frase Nombre = \"Luis\" # Definimos la segunda palabra o frase Apellido = \"Martinez\" print(\"Concatenaci\u00f3n sin espacios: \") # Mostramos por pantalla la concatenaci\u00f3n, para concatenar palabras o frases # utilizamos el signo mas(+) para indicarle que queremos unir esas dos varibles print(Nombre + Apellido) # Resultado -> LuisMartinez Ejemplo para concatenar con espacios # Definimos la primera palabra o frase Nombre = \"Laura\" # Definimos la segunda palabra o frase Apellido = \"Gonzalez\" # Definimos el separador que queremos utilizar, es decir, le podemos dar # cualquier nombre a la variable pero es recomendable darle un nombre significativo # en este caso lo vamos a separar con espacios espacio = ' ' print(\"\\nConcatenaci\u00f3n con espacio: \") # Mostramos por pantalla la concatenaci\u00f3n incluyendo el separador, es decir, la variable espacio print(Nombre + espacio + Apellido) # Resultado -> Laura Gonzalez Ejemplo para concatenar con puntos, asteriscos, guiones, etc # Definimos la primera palabra o frase Nombre = \"Paco\" # Definimos la segunda palabra o frase Apellido = \"Rodriguez\" # Definimos el separador que queremos utilizar, es decir, le podemos dar # cualquier nombre a la variable pero es recomendable darle un nombre significativo # en este caso lo vamos a separar con puntos punto = '.' print(\"\\nConcatenaci\u00f3n con punto: \") # Mostramos por pantalla la concatenaci\u00f3n incluyendo el separador, es decir, la variable espacio print(Nombre + punto + Apellido) # Resultado -> Paco.Rodriguez","title":"Concatenar palabras, letras o frases"},{"location":"strings/strings/#introducir-por-valores-por-teclado","text":"En este apartado vamos a ver ejemplos de como introducir valores por teclado con el m\u00e9todo input() , en este ejemplo pide que introduzcamos n\u00fameros pero podemos cambiar ese texto y pedir lo que necesitamos. Caso para n\u00fameros # Definimos la variable que va a almacenar el valor que vamos a introducir numero = input(\"Introduce un n\u00famero: \") # Mostramos por pantalla el valor introducido print(numero) Caso en el que queramos que introduzcan texto # Definimos la variable que va a almacenar el valor que vamos a introducir texto = input(\"Introduce una palabra: \") # Mostramos por pantalla el valor introducido print(texto)","title":"Introducir por valores por teclado"},{"location":"strings/strings/#metodos-que-se-pueden-usar-con-los-strings","text":"En este apartado vamos a ver ejemplos de los diferentes m\u00e9todos que hay y que se pueden usan.","title":"M\u00e9todos que se pueden usar con los strings"},{"location":"strings/strings/#metodo-capitalize","text":"M\u00e9todo capitalize(): Este m\u00e9todo se usa para convertir la primera palabra de una frase a may\u00fasculas. # Definimos la frase frase1 = \"el sol brilla mucho\" print(\"M\u00e9todo capitalize(): \") # Mostramos por pantalla la frase original print(frase1) # Mostramos por pantalla la frase con la primera letra en may\u00fasculas usando el m\u00e9todo capitalize() print(frase1.capitalize()) # Resultado -> El sol brilla mucho","title":"M\u00e9todo capitalize()"},{"location":"strings/strings/#metodo-count","text":"M\u00e9todo count(): Este m\u00e9todo se usa para contar cuantas veces aparece una letra en la frase. # Definimos la frase frase2 = \"el coche aparcado es rojo\" print(\"\\nM\u00e9todo count(): \") # Mostramos por pantalla la frase original print(frase2) # Mostramos por pantalla el conteo de Oes que tiene la frase usando el m\u00e9todo count() print(frase2.count('o')) # Resultado -> 4","title":"M\u00e9todo count()"},{"location":"strings/strings/#metodo-endswith","text":"M\u00e9todo endswith(): Este m\u00e9todo se usa para comprobar si una frase termina con algo en espec\u00edfico, este m\u00e9todo es un boolean, es decir, si acaba de esa forma o no (true o false). # Definimos la frase frase3 = \"los arboles son altos\" print(\"\\nM\u00e9todo endswith(): \") # Mostramos por pantalla la frase original print(frase3) # Mostramos por pantalla si esa frase acaba de la forma que le decimos o no print(frase3.endswith(\"os\")) # Resultado -> True print(frase3.endswith(\"los\")) # Resultado -> False","title":"M\u00e9todo endswith()"},{"location":"strings/strings/#metodo-expandtabs","text":"M\u00e9todo expandtabs(): Este m\u00e9todo se usa para reemplazar todos los caracteres de tabulaci\u00f3n (\\t) en una frase por un n\u00famero espec\u00edfico de espacios. # Definimos la frase frase4 = \"Me\\tvoy\\tde\\tvacaciones\" print(\"\\nM\u00e9todo expandtabs(): \") # Mostramos por pantalla la frase original print(frase4) # Mostramos por pantalla la frase con los espacios deseados print(frase4.expandtabs(0)) # Resultado -> Mevoydevacaciones print(frase4.expandtabs(20)) # Resultado -> Me voy de vacaciones","title":"M\u00e9todo expandtabs()"},{"location":"strings/strings/#metodo-find","text":"M\u00e9todo find(): Este m\u00e9todo se usa para buscar una palabara espec\u00edfica en una frase y nos devuelve el n\u00famero en el que empieza y aparece esa palabra. Si esa palabra no se encuentra devuelve -1. # Definimos la frase frase5 = \"Bienvenidos al curso de programacion\" print(\"\\nM\u00e9todo find(): \") # Mostramos por pantalla la frase original print(frase5) # Mostramos por pantalla el n\u00famero de donde aparece por primera vez esa palabra # y si no existe muestra -1 print(frase5.find(\"curso\")) # Resultado -> 15 print(frase5.find(\"hola\")) # Resultado -> -1","title":"M\u00e9todo find()"},{"location":"strings/strings/#metodo-format","text":"M\u00e9todo format(): Este m\u00e9todo se usa para dar formato a Strings, permitiendo insertar valores dentro de un texto utilizando marcadores de posici\u00f3n {}. Esta es una forma poderosa y flexible de construir cadenas. # Definimos las variables que vamos a usar para dar formato nombre6 = \"Pedro\" apellido6 = \"Martinez\" # Definimos la frase que contiene las variables usadas para dar formato frase6_formato = \"Hola {} {}, bienvenido al sistema\".format(nombre6, apellido6) print(\"\\nM\u00e9todo format(): \") # Mostramos por pantalla la String con el formato print(frase6_formato) # Resultado -> Hola Pedro Martinez, bienvenido al sistema","title":"M\u00e9todo format()"},{"location":"strings/strings/#metodo-index","text":"M\u00e9todo index(): Este m\u00e9todo es similar al m\u00e9todo find() se usa para buscar una subcadena dentro dentro de una cadena y nos devuelve el \u00edndice de la primera aparici\u00f3n. Sin embargo, a diferencia del m\u00e9todo find(), si la subcadena no se encuentra, index() lanza una expcepci\u00f3n llamada ValueError. # Definimos la frase frase7 = \"Aprender python es divertido\" print(\"\\nM\u00e9todo index(): \") # Mostramos por pantalla la frase original print(frase7) # Mostramos por pantalla el numero de veces que aparece una letra o conjunto de letras y # si no lo encuentra nos muestra el error ValueError print(frase7.index(\"e\")) # Resultado -> 3","title":"M\u00e9todo index()"},{"location":"strings/strings/#metodo-isalnum","text":"M\u00e9todo isalnum(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son alfanum\u00e9ricos, es decir, si son letras (a-z, A-Z) o son n\u00famero (0-9). # Definimos la frase sin espacios frase8 = \"TreintaDiasDePython\" # Definimos la frase con espacios frase81 = \"Ejemplos de Python\" print(\"\\nM\u00e9todo isalnum(): \") # Mostramos por pantalla las frases originales print(frase8) print(frase81) # Mostramos por pantalla si la cadena contiene valores alfanum\u00e9ricos mostrandonos true y # en caso de que contenga espacios nos motrar\u00e1 false ya que los espacios no son alfanum\u00e9ricos print(frase8.isalnum()) # Resultado -> true print(frase81.isalnum()) # Resultado -> false","title":"M\u00e9todo isalnum()"},{"location":"strings/strings/#metodo-isalpha","text":"M\u00e9todo isalpha(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son alfab\u00e9ticos, es decir, si son letras (a-z, A-Z). # Definimos la frase sin numeros frase9 = \"Vivoenunchalet\" # Definimos la frase con numeros frase91= \"Elnumeroesel29\" print(\"\\nM\u00e9todo isalpha(): \") # Mostramos por pantalla las frases originales print(frase9) print(frase91) # Mostramos por pantalla si la cadena contiene valores alfab\u00e9ticos mostrandonos true y # en caso de que contenga n\u00fameros nos motrar\u00e1 false ya que los n\u00famero no son alfab\u00e9ticos # otro caso que nos puede mostrar false es una frase con espacios, ya que los espacios # no son alfab\u00e9ticos print(frase9.isalpha()) # Resultado -> true print(frase91.isalpha()) # Resultado -> false","title":"M\u00e9todo isalpha()"},{"location":"strings/strings/#metodo-isdecimal","text":"M\u00e9todo isdecimal(): Este m\u00e9todo se usa para verificar si todos los caracteres de una cadena son n\u00famero decimales, esto significa que la cadena solo puede contener n\u00famero enteros sin decimales sin signos negativos, ni otros caracteres no n\u00famericos. # Definimos la frase con n\u00fameros decimales frase10 = \"1234\" # Definimos la frase sin numeros decimales frase101= \"-5678\" print(\"\\nM\u00e9todo isdecimal(): \") # Mostramos por pantalla las frases originales print(frase10) print(frase101) # Mostramos por pantalla si la cadena contiene valores decimales mostrandonos true y # en caso de que contenga d\u00edgitos no decimales nos motrar\u00e1 false ya que como se ha mencionado # anteriormente si contiene signo negativo u otros caracteres nos mostrar\u00e1 false print(frase10.isdecimal()) # Resultado -> true print(frase101.isdecimal()) # Resultado -> false","title":"M\u00e9todo isdecimal()"},{"location":"strings/strings/#metodo-isdigit","text":"M\u00e9todo isdigit(): Este m\u00e9todo es un m\u00e9todo incorporado que se usa para verificar si todos los caracteres de una cadena est\u00e1 formada \u00fanicamente por n\u00fameros, sin embargo, isdigit() es m\u00e1s amplio que isdecimal(), ya que tambi\u00e9n acepta otros tipos de d\u00edgitos num\u00e9ricos que no sean solo n\u00famero del 0-9, como los n\u00fameros en otros sistemas num\u00e9ricos (como por ejemplo, n\u00fameros romanos o d\u00edgitos de otros alfabetos). # Definimos la frase con n\u00fameros decimales frase11 = \"1234\" # Definimos la frase sin numeros decimales frase111= \"567.8\" print(\"\\nM\u00e9todo isdigit(): \") # Mostramos por pantalla las frases originales print(frase11) print(frase111) # Mostramos por pantalla si la cadena contiene valores decimales mostrandonos true y # en caso de que contenga d\u00edgitos no decimales nos motrar\u00e1 false ya que como se ha mencionado # anteriormente si contiene signo negativo u otros caracteres nos mostrar\u00e1 false print(frase11.isdigit()) # Resultado -> true print(frase111.isdigit()) # Resultado -> false","title":"M\u00e9todo isdigit()"},{"location":"strings/strings/#metodo-isidentifier","text":"M\u00e9todo isidentifier(): Este m\u00e9todo se usa para comprobar si una cadena es un identificador v\u00e1lido en Pyhton. Un identificador es una secuencia de caracteres que puede ser utilizada como nombre para variables, funciones, clases, etc. Para que una cadena sea un identificador v\u00e1lido en Python, debe seguir estas reglas: Solo puede contener letras (May\u00fasculas o minusculas), digitos (0-9) y guiones bajos ( _ ). No puede comenzar con un n\u00famero. No puede ser una palabra reservada como (if, for, while, etc). print(\"\\nM\u00e9todo isidentifier(): \") # Mostramos por pantalla si los siguientes nombres de variables son identificadores v\u00e1lidos print(\"variable1\".isidentifier()) # Resultado -> true print(\"1variable\".isidentifier()) # Resultado -> false | Ya que comienza con un n\u00famero (Regla 2) print(\"mi_variable\".isidentifier()) # Resultado -> true","title":"M\u00e9todo isidentifier()"},{"location":"strings/strings/#metodo-islower","text":"M\u00e9todo islower(): Este m\u00e9todo se usa para comprobar si todas las letras de una cadena de texto son min\u00fasculas. # Definimos la frase en minusculas frase13 = \"hola\" # Definimos la frase con una letra en mayusculas frase131 = \"Prueba\" print(\"\\nM\u00e9todo islower(): \") # Mostramos por pantalla las frases originales print(frase13) print(frase131) # Mostramos por pantalla si las siguientes cadenas estan en minusculas o no, si estan en minusculas nos # devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase13.islower()) # Resultado -> true print(frase131.islower()) # Resultado -> false","title":"M\u00e9todo islower()"},{"location":"strings/strings/#metodo-isupper","text":"M\u00e9todo isupper(): Este m\u00e9todo se usa para comprobar si todas las letras de una cadena de texto son may\u00fasculas. # Definimos la frase en minusculas frase14 = \"COCHE\" # Definimos la frase con una letra en mayusculas frase141 = \"moto\" print(\"\\nM\u00e9todo isupper(): \") # Mostramos por pantalla las frases originales print(frase14) print(frase141) # Mostramos por pantalla si las siguientes cadenas estan en mayusculas o no, si estan en mayusculas nos # devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase14.isupper()) # Resultado -> true print(frase141.isupper()) # Resultado -> false","title":"M\u00e9todo isupper()"},{"location":"strings/strings/#metodo-isnumeric","text":"M\u00e9todo isnumeric(): Este m\u00e9todo se usa para comprobar si toda la cadena consiste en n\u00fameros, es decir, que la frase debe contener solo n\u00fameros y no puede contener letras, espacios o s\u00edmbolos. # Definimos la frase con numeros frase15 = \"123\" # Definimos la frase con numeros y letras frase151 = \"456abc\" print(\"\\nM\u00e9todo isnumeric(): \") # Mostramos por pantalla las frases originales print(frase15) print(frase151) # Mostramos por pantalla si las siguientes cadenas estan formadas solo por numeros o no, # si estan formada solo por n\u00fameros nos devolver\u00e1 true en caso contrario nos mostrar\u00e1 false print(frase15.isnumeric()) # Resultado -> true print(frase151.isnumeric()) # Resultado -> false","title":"M\u00e9todo isnumeric()"},{"location":"strings/strings/#metodo-join","text":"M\u00e9todo join(): Este m\u00e9todo se usa para unir una secuencia ya sea una lista, tupla o cualquier otro itinerable de cadena de texto en una sola cadena. Este m\u00e9todo coge como argumento un itinerable que contiene cadenas y la concatena, usando el string que lo llama como separador. # Definimos la sentencia frase16 = [\"peras\", \"uvas\", \"sandias\"] # Definimos el resultado separado con espacios frase161 = \" \".join(frase16) # Definimos el resultado separado con guiones frase162 = \"-\".join(frase16) print(\"\\nM\u00e9todo join(): \") # Mostramos por pantalla la sentencia print(frase16) # Mostramos por pantalla los resultados concatenados print(frase161) # Resultado -> peras uvas sandias print(frase162) # Resultado -> peras-uvas-sandias","title":"M\u00e9todo join()"},{"location":"strings/strings/#metodo-strip","text":"M\u00e9todo strip(): Este m\u00e9todo se usa para eliminar los espacios en blanco o caracteres especificados al principio o al final de una cadena de texto. No elimina los caracteres del medio de la cadena, solo elimina los del principio y los del final. # Definimos la frase con espacios en blanco frase17 = \" Hola, que tal? \" print(\"\\nM\u00e9todo strip(): \") # Mostramos por pantalla las frases originales print(frase17) # Mostramos por pantalla los resultados usando el m\u00e9todo strip() print(frase17.strip()) # Resultado -> Hola, que tal?","title":"M\u00e9todo strip()"},{"location":"strings/strings/#metodo-replace","text":"M\u00e9todo replace(): Este m\u00e9todo se usa para reemplazar una subcadena espec\u00edfica en una cadena por otra subcadena. Este m\u00e9todo no modifica la cadena original, sino que devuelve una nueva con las situaciones realizadas. # Definimos la frase frase18 = \"Estoy aprendiendo java\" print(\"\\nM\u00e9todo replace(): \") # Mostramos por pantalla la frase original print(frase18) # Mostramos por pantalla la frase reemplazando java por python print(frase18.replace('java', 'python')) # Resultado -> Estoy aprendiendo python","title":"M\u00e9todo replace()"},{"location":"strings/strings/#metodo-split","text":"M\u00e9todo split(): Este m\u00e9todo se usa para dividir una cadena en una lista de subcadenas, utilizando un delimitador espec\u00edfico como un espacio, una coma, etc. Si no se especifica un delimitador, divide la cadena en cada espacio en blanco. # Definimos la frase con division por espacios frase19 = \"Bienvenido a Python\" print(\"\\nM\u00e9todo split(): \") # Mostramos por pantalla la frase original print(frase19) # Mostramos por pantalla la frase dividida print(frase19.split()) # Resultado -> ['Bienvenido', 'a', 'Python']","title":"M\u00e9todo split()"},{"location":"strings/strings/#metodo-title","text":"M\u00e9todo title(): Este m\u00e9todo se usa para devolver una cadena donde la primera letra de cada palabra esta en mayuscula y el resto de las letras estan en minuscula. Este m\u00e9todo es util para formatear titulos o nombres de manera consistente. # Definimos la frase frase20 = \"mi casa es blanca\" print(\"\\nM\u00e9todo title(): \") # Mostramos por pantalla la frase original print(frase20) # Mostramos por pantalla la frase modificando las primeras letras print(frase20.title()) # Resultado -> Mi Casa Es Blanca","title":"M\u00e9todo title()"},{"location":"strings/strings/#metodo-swapcase","text":"M\u00e9todo swapcase(): Este m\u00e9todo se usa para devolver una nueva cadena donde las letras en mayusculas se convierten en minuscula y las letras en minuscula se convierten en mayuscula. Este m\u00e9todo es util para invertir rapidamente el caso de los caracteres en una cadena. # Definimos la frase frase21 = \"Fruteria Paco\" print(\"\\nM\u00e9todo swapcase(): \") # Mostramos por pantalla la frase original print(frase21) # Mostramos por pantalla la frase modificando las mayusculas y las minusculas print(frase21.swapcase()) # Resultado -> Fruteria Paco","title":"M\u00e9todo swapcase()"},{"location":"strings/strings/#metodo-startswith","text":"M\u00e9todo startswith(): Este m\u00e9todo se usa para verificar si una cadena comienza con una subcadena espec\u00edfica devuelve un valor booleano true si la cadena comienza con la subcadena especificada o false si no comienza con la subcadena. # Definimos la frase frase22 = \"Que te calles\" frase221 = \"Esto es un chorizo\" print(\"\\nM\u00e9todo startswith(): \") # Mostramos por pantalla las frases originales print(frase22) print(frase221) # Mostramos por pantalla las frases mostrando si tienen ese comienzo o no print(frase22.startswith(\"Que\")) # Resultado -> true print(frase221.startswith(\"chorizo\")) # Resultado -> false","title":"M\u00e9todo startswith()"},{"location":"variables/variables/","text":"En python las variables no tienen tipo, ya que a la hora de definir una variable el mismo ya sabe que valor va a tomar esa variable Tipos de variables Las variables toman los valores de forma autom\u00e1tica que quiere decir esto que Python es un leguaje tipado din\u00e1mico. Esto significa que el tipo de una variable se determina en tiempo de ejecuci\u00f3n, no en tiempo de compilaci\u00f3n. Por tanto, no es necesario declarar el tipo de una variable cuando se crea. Definici\u00f3n de una variable con un valor de tipo entero. entero = 1 Definici\u00f3n de una variable con un valor de tipo doble, es decir, decimal. double = 3.5 Definici\u00f3n de una variable de tipo string, es decir, una varible que solo almacena texto. string = \"Hola\" Definici\u00f3n de una variable booleana, es decir, una variable que solo almacena True o False y como valor por defecto se le asigna False. boolean = False Definici\u00f3n de una variable de tipo array, es decir, una colecci\u00f3n ordenada de elementos. Los elementos pueden ser de cualquier tipo (n\u00fameros, cadenas, otros arrays, etc.), y se acceden mediante un \u00edndice num\u00e9rico que empieza en 0. array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] Definici\u00f3n de una variable de tipo diccionario, es decir, una colecci\u00f3n no ordenada de pares clave-valor. En lugar de usar \u00edndices num\u00e9ricos como en las listas, usamos claves para acceder a los valores. diccionario = { 'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid' } Mostrar valores por consola con print() print() es una funci\u00f3n incorporada en Python que se usa para mostrar informaci\u00f3n en la salida est\u00e1ndar (normalmente la consola). Puede imprimir uno o m\u00e1s valores, separadolos con un espacio por defecto. Voy a poner ejemplos de como se usa el print() con las variables anteriores. print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid'} Mostrar por pantalla el tipo que tiene la variable Tambi\u00e9n podemos usar print() para mostrar por pantalla que tipo tiene cada variable dependiendo del valor asignado usando type() . print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'> Tambi\u00e9n podemos declarar multiples variables en una l\u00ednea, no es recomendable pero se puede hacer. nombre, edad, es_mayor, pie = \"Luis\", 25, True, 42.5 Acceder a un diccionario Para acceder a un diccionario se acceder de forma parecida a una array, pero en este caso en vez de poner la posici\u00f3n le ponemos el valor al que queremos acceder. Paso 1. Definimos el diccionario Informacion = { 'Nombre': 'Pedro', 'Apellido': 'Gonzalez', 'Pais': 'Espa\u00f1a', 'Ciudad': 'Getafe', 'Edad': 24 } Paso 2. Accedemos a Nombre y Edad : print(Informacion['Nombre'], Informacion['Edad']) # Resultado -> Pedro 24 Ejemplo de c\u00f3digo para probar su funcionamiento implementando todo lo anterior mencionado Paso 1. Creamos nuestro archivo llamado ejemplo1.py . Paso 2. Pegaremos el siguiente c\u00f3digo y le daremos al boton de ejecutar, si no sabes cual boton es el de ejecutar buscaremos un boton en la parte superior como se muestra en la foto resaltado en verde. # Definici\u00f3n de las variables entero = 1 double = 3.5 string = \"Hola\" boolean = False array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] diccionario = { \"Nombre: \" \"Paco\", \"Apellido: \" \"Martinez\", \"ciudad:\" \"Madrid\" } # Mostramos por pantalla las variables print(\"Valor de cada variable: \") print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre: Paco', 'Apellido: Martinez', 'ciudad:Madrid'} # Mostramos por pantalla de que tipo tiene cada variable dependiendo del valor asignado usando type() print(\"\\nTipo que toma cada variable: \") print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'>","title":"Variables"},{"location":"variables/variables/#en-python-las-variables-no-tienen-tipo-ya-que-a-la-hora-de-definir-una-variable-el-mismo-ya-sabe-que-valor-va-a-tomar-esa-variable","text":"","title":"En python las variables no tienen tipo, ya que a la hora de definir una variable el mismo ya sabe que valor va a tomar esa variable"},{"location":"variables/variables/#tipos-de-variables","text":"Las variables toman los valores de forma autom\u00e1tica que quiere decir esto que Python es un leguaje tipado din\u00e1mico. Esto significa que el tipo de una variable se determina en tiempo de ejecuci\u00f3n, no en tiempo de compilaci\u00f3n. Por tanto, no es necesario declarar el tipo de una variable cuando se crea. Definici\u00f3n de una variable con un valor de tipo entero. entero = 1 Definici\u00f3n de una variable con un valor de tipo doble, es decir, decimal. double = 3.5 Definici\u00f3n de una variable de tipo string, es decir, una varible que solo almacena texto. string = \"Hola\" Definici\u00f3n de una variable booleana, es decir, una variable que solo almacena True o False y como valor por defecto se le asigna False. boolean = False Definici\u00f3n de una variable de tipo array, es decir, una colecci\u00f3n ordenada de elementos. Los elementos pueden ser de cualquier tipo (n\u00fameros, cadenas, otros arrays, etc.), y se acceden mediante un \u00edndice num\u00e9rico que empieza en 0. array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] Definici\u00f3n de una variable de tipo diccionario, es decir, una colecci\u00f3n no ordenada de pares clave-valor. En lugar de usar \u00edndices num\u00e9ricos como en las listas, usamos claves para acceder a los valores. diccionario = { 'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid' }","title":"Tipos de variables"},{"location":"variables/variables/#mostrar-valores-por-consola-con-print","text":"print() es una funci\u00f3n incorporada en Python que se usa para mostrar informaci\u00f3n en la salida est\u00e1ndar (normalmente la consola). Puede imprimir uno o m\u00e1s valores, separadolos con un espacio por defecto. Voy a poner ejemplos de como se usa el print() con las variables anteriores. print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre': 'Paco', 'Apellido': 'Martinez', 'Ciudad': 'Madrid'}","title":"Mostrar valores por consola con print()"},{"location":"variables/variables/#mostrar-por-pantalla-el-tipo-que-tiene-la-variable","text":"Tambi\u00e9n podemos usar print() para mostrar por pantalla que tipo tiene cada variable dependiendo del valor asignado usando type() . print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'> Tambi\u00e9n podemos declarar multiples variables en una l\u00ednea, no es recomendable pero se puede hacer. nombre, edad, es_mayor, pie = \"Luis\", 25, True, 42.5","title":"Mostrar por pantalla el tipo que tiene la variable"},{"location":"variables/variables/#acceder-a-un-diccionario","text":"Para acceder a un diccionario se acceder de forma parecida a una array, pero en este caso en vez de poner la posici\u00f3n le ponemos el valor al que queremos acceder. Paso 1. Definimos el diccionario Informacion = { 'Nombre': 'Pedro', 'Apellido': 'Gonzalez', 'Pais': 'Espa\u00f1a', 'Ciudad': 'Getafe', 'Edad': 24 } Paso 2. Accedemos a Nombre y Edad : print(Informacion['Nombre'], Informacion['Edad']) # Resultado -> Pedro 24","title":"Acceder a un diccionario"},{"location":"variables/variables/#ejemplo-de-codigo-para-probar-su-funcionamiento-implementando-todo-lo-anterior-mencionado","text":"Paso 1. Creamos nuestro archivo llamado ejemplo1.py . Paso 2. Pegaremos el siguiente c\u00f3digo y le daremos al boton de ejecutar, si no sabes cual boton es el de ejecutar buscaremos un boton en la parte superior como se muestra en la foto resaltado en verde. # Definici\u00f3n de las variables entero = 1 double = 3.5 string = \"Hola\" boolean = False array = [\"uno\", \"dos\", \"tres\", \"cuatro\"] diccionario = { \"Nombre: \" \"Paco\", \"Apellido: \" \"Martinez\", \"ciudad:\" \"Madrid\" } # Mostramos por pantalla las variables print(\"Valor de cada variable: \") print(entero) # Resultado -> 1 print(double) # Resultado -> 3.5 print(string) # Resultado -> Hola print(boolean) # Resultado -> False print(array) # Resultado -> [\"uno\", \"dos\", \"tres\", \"cuatro\"] print(diccionario) # Resultado -> {'Nombre: Paco', 'Apellido: Martinez', 'ciudad:Madrid'} # Mostramos por pantalla de que tipo tiene cada variable dependiendo del valor asignado usando type() print(\"\\nTipo que toma cada variable: \") print(type(entero)) # Resultado -> <class 'int'> print(type(double)) # Resultado -> <class 'float'> print(type(string)) # Resultado -> <class 'str'> print(type(boolean)) # Resultado -> <class 'bool'> print(type(array)) # Resultado -> <class 'list'> print(type(diccionario)) # Resultado -> <class 'set'>","title":"Ejemplo de c\u00f3digo para probar su funcionamiento implementando todo lo anterior mencionado"}]}